{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/toggle-group/src/ToggleGroup.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Toggle } from '@radix-ui/react-toggle';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_GROUP_NAME = 'ToggleGroup';\n\ntype ScopedProps<P> = P & { __scopeToggleGroup?: Scope };\nconst [createToggleGroupContext, createToggleGroupScope] = createContextScope(TOGGLE_GROUP_NAME, [\n  createRovingFocusGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype ToggleGroupElement = ToggleGroupImplSingleElement | ToggleGroupImplMultipleElement;\ninterface ToggleGroupSingleProps extends ToggleGroupImplSingleProps {\n  type: 'single';\n}\ninterface ToggleGroupMultipleProps extends ToggleGroupImplMultipleProps {\n  type: 'multiple';\n}\n\nconst ToggleGroup = React.forwardRef<\n  ToggleGroupElement,\n  ToggleGroupSingleProps | ToggleGroupMultipleProps\n>((props, forwardedRef) => {\n  const { type, ...toggleGroupProps } = props;\n\n  if (type === 'single') {\n    const singleProps = toggleGroupProps as ToggleGroupImplSingleProps;\n    return <ToggleGroupImplSingle {...singleProps} ref={forwardedRef} />;\n  }\n\n  if (type === 'multiple') {\n    const multipleProps = toggleGroupProps as ToggleGroupImplMultipleProps;\n    return <ToggleGroupImplMultiple {...multipleProps} ref={forwardedRef} />;\n  }\n\n  throw new Error(`Missing prop \\`type\\` expected on \\`${TOGGLE_GROUP_NAME}\\``);\n});\n\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupValueContextValue = {\n  type: 'single' | 'multiple';\n  value: string[];\n  onItemActivate(value: string): void;\n  onItemDeactivate(value: string): void;\n};\n\nconst [ToggleGroupValueProvider, useToggleGroupValueContext] =\n  createToggleGroupContext<ToggleGroupValueContextValue>(TOGGLE_GROUP_NAME);\n\ntype ToggleGroupImplSingleElement = ToggleGroupImplElement;\ninterface ToggleGroupImplSingleProps extends ToggleGroupImplProps {\n  /**\n   * The controlled stateful value of the item that is pressed.\n   */\n  value?: string;\n  /**\n   * The value of the item that is pressed when initially rendered. Use\n   * `defaultValue` if you do not need to control the state of a toggle group.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the value of the toggle group changes.\n   */\n  onValueChange?(value: string): void;\n}\n\nconst ToggleGroupImplSingle = React.forwardRef<\n  ToggleGroupImplSingleElement,\n  ToggleGroupImplSingleProps\n>((props: ScopedProps<ToggleGroupImplSingleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupSingleProps\n  } = props;\n\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  return (\n    <ToggleGroupValueProvider\n      scope={props.__scopeToggleGroup}\n      type=\"single\"\n      value={value ? [value] : []}\n      onItemActivate={setValue}\n      onItemDeactivate={React.useCallback(() => setValue(''), [setValue])}\n    >\n      <ToggleGroupImpl {...toggleGroupSingleProps} ref={forwardedRef} />\n    </ToggleGroupValueProvider>\n  );\n});\n\ntype ToggleGroupImplMultipleElement = ToggleGroupImplElement;\ninterface ToggleGroupImplMultipleProps extends ToggleGroupImplProps {\n  /**\n   * The controlled stateful value of the items that are pressed.\n   */\n  value?: string[];\n  /**\n   * The value of the items that are pressed when initially rendered. Use\n   * `defaultValue` if you do not need to control the state of a toggle group.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the toggle group changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst ToggleGroupImplMultiple = React.forwardRef<\n  ToggleGroupImplMultipleElement,\n  ToggleGroupImplMultipleProps\n>((props: ScopedProps<ToggleGroupImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleButtonActivate = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleButtonDeactivate = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <ToggleGroupValueProvider\n      scope={props.__scopeToggleGroup}\n      type=\"multiple\"\n      value={value}\n      onItemActivate={handleButtonActivate}\n      onItemDeactivate={handleButtonDeactivate}\n    >\n      <ToggleGroupImpl {...toggleGroupMultipleProps} ref={forwardedRef} />\n    </ToggleGroupValueProvider>\n  );\n});\n\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupContextValue = { rovingFocus: boolean; disabled: boolean };\n\nconst [ToggleGroupContext, useToggleGroupContext] =\n  createToggleGroupContext<ToggleGroupContextValue>(TOGGLE_GROUP_NAME);\n\ntype RovingFocusGroupProps = Radix.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype ToggleGroupImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ToggleGroupImplProps extends PrimitiveDivProps {\n  /**\n   * Whether the group is disabled from user interaction.\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * Whether the group should maintain roving focus of its buttons.\n   * @defaultValue true\n   */\n  rovingFocus?: boolean;\n  loop?: RovingFocusGroupProps['loop'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst ToggleGroupImpl = React.forwardRef<ToggleGroupImplElement, ToggleGroupImplProps>(\n  (props: ScopedProps<ToggleGroupImplProps>, forwardedRef) => {\n    const {\n      __scopeToggleGroup,\n      disabled = false,\n      rovingFocus = true,\n      orientation,\n      dir = 'ltr',\n      loop = true,\n      ...toggleGroupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToggleGroup);\n    const commonProps = { role: 'group', dir, ...toggleGroupProps };\n    return (\n      <ToggleGroupContext scope={__scopeToggleGroup} rovingFocus={rovingFocus} disabled={disabled}>\n        {rovingFocus ? (\n          <RovingFocusGroup.Root\n            asChild\n            {...rovingFocusGroupScope}\n            orientation={orientation}\n            dir={dir}\n            loop={loop}\n          >\n            <Primitive.div {...commonProps} ref={forwardedRef} />\n          </RovingFocusGroup.Root>\n        ) : (\n          <Primitive.div {...commonProps} ref={forwardedRef} />\n        )}\n      </ToggleGroupContext>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'ToggleGroupItem';\n\ntype ToggleGroupItemElement = ToggleGroupItemImplElement;\ninterface ToggleGroupItemProps extends Omit<ToggleGroupItemImplProps, 'pressed'> {}\n\nconst ToggleGroupItem = React.forwardRef<ToggleGroupItemElement, ToggleGroupItemProps>(\n  (props: ScopedProps<ToggleGroupItemProps>, forwardedRef) => {\n    const valueContext = useToggleGroupValueContext(ITEM_NAME, props.__scopeToggleGroup);\n    const context = useToggleGroupContext(ITEM_NAME, props.__scopeToggleGroup);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(props.__scopeToggleGroup);\n    const pressed = valueContext.value.includes(props.value);\n    const disabled = context.disabled || props.disabled;\n    const commonProps = { ...props, pressed, disabled };\n    const ref = React.useRef<HTMLDivElement>(null);\n    return context.rovingFocus ? (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!disabled}\n        active={pressed}\n        ref={ref}\n      >\n        <ToggleGroupItemImpl {...commonProps} ref={forwardedRef} />\n      </RovingFocusGroup.Item>\n    ) : (\n      <ToggleGroupItemImpl {...commonProps} ref={forwardedRef} />\n    );\n  }\n);\n\nToggleGroupItem.displayName = ITEM_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupItemImplElement = React.ElementRef<typeof Toggle>;\ntype ToggleProps = Radix.ComponentPropsWithoutRef<typeof Toggle>;\ninterface ToggleGroupItemImplProps extends Omit<ToggleProps, 'defaultPressed' | 'onPressedChange'> {\n  /**\n   * A string value for the toggle group item. All items within a toggle group should use a unique value.\n   */\n  value: string;\n}\n\nconst ToggleGroupItemImpl = React.forwardRef<ToggleGroupItemImplElement, ToggleGroupItemImplProps>(\n  (props: ScopedProps<ToggleGroupItemImplProps>, forwardedRef) => {\n    const { __scopeToggleGroup, value, ...itemProps } = props;\n    const valueContext = useToggleGroupValueContext(ITEM_NAME, __scopeToggleGroup);\n    const singleProps = { role: 'radio', 'aria-checked': props.pressed, 'aria-pressed': undefined };\n    const typeProps = valueContext.type === 'single' ? singleProps : undefined;\n    return (\n      <Toggle\n        {...typeProps}\n        {...itemProps}\n        ref={forwardedRef}\n        onPressedChange={(pressed) => {\n          if (pressed) {\n            valueContext.onItemActivate(value);\n          } else {\n            valueContext.onItemDeactivate(value);\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ToggleGroup;\nconst Item = ToggleGroupItem;\n\nexport {\n  createToggleGroupScope,\n  //\n  ToggleGroup,\n  ToggleGroupItem,\n  //\n  Root,\n  Item,\n};\nexport type { ToggleGroupSingleProps, ToggleGroupMultipleProps, ToggleGroupItemProps };\n"],"names":["dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","$parcel$interopDefault","a","__esModule","default","createToggleGroupContext","createToggleGroupScope","createContextScope","createRovingFocusGroupScope","useRovingFocusGroupScope","ToggleGroup","React","forwardRef","props","forwardedRef","type","toggleGroupProps","singleProps","_react","createElement","$f77bfc2d84e306a2598fbec8af931a$var$ToggleGroupImplSingle","_babelRuntimeHelpersExtends","ref","multipleProps","$f77bfc2d84e306a2598fbec8af931a$var$ToggleGroupImplMultiple","Error","ToggleGroupValueProvider","useToggleGroupValueContext","ToggleGroupImplSingle","value","valueProp","defaultValue","onValueChange","toggleGroupSingleProps","setValue","useControllableState","prop","defaultProp","onChange","$f77bfc2d84e306a2598fbec8af931a$var$ToggleGroupValueProvider","scope","__scopeToggleGroup","onItemActivate","onItemDeactivate","useCallback","$f77bfc2d84e306a2598fbec8af931a$var$ToggleGroupImpl","ToggleGroupImplMultiple","toggleGroupMultipleProps","handleButtonActivate","itemValue","prevValue","handleButtonDeactivate","filter","ToggleGroupContext","useToggleGroupContext","ToggleGroupImpl","disabled","rovingFocus","orientation","dir","loop","rovingFocusGroupScope","commonProps","role","$f77bfc2d84e306a2598fbec8af931a$var$ToggleGroupContext","_radixUiReactRovingFocus","Root","asChild","Primitive","div","ToggleGroupItem","valueContext","context","pressed","includes","useRef","Item","focusable","active","$f77bfc2d84e306a2598fbec8af931a$var$ToggleGroupItemImpl","ToggleGroupItemImpl","itemProps","undefined","typeProps","Toggle","onPressedChange"],"version":3,"file":"index.js.map"}