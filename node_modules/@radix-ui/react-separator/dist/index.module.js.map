{"mappings":"gIASA,MACMA,EAAsB,aACtBC,EAAe,CAAC,aAAc,mBAiBpC,MAAMC,uBAAYC,EAAMC,YAA6C,CAACC,EAAOC,KAC3E,MAAMC,WAAEA,EAAYC,YAAaC,EAAkBT,KAAwBU,GAAaL,EAClFG,EAAcG,EAAmBF,GAAmBA,EAAkBT,EAGtEY,EAAgBL,EAClB,CAAEM,KAAM,QACR,CAAE,mBAHkC,aAAhBL,EAA6BA,OAAcM,EAGxBD,KAAM,0BAEjD,OACEE,EAAAC,cAACC,EAAUC,IAAXC,EAAA,CACE,mBAAkBX,GACdI,EACAF,EAHN,CAIEU,IAAKd,qBA6BX,SAASK,EAAmBH,GAC1B,OAAOP,EAAaoB,SAASb,GAvB/BN,UAAUoB,UAAY,CACpBd,YAAYH,EAAOkB,EAAUC,GAC3B,MAAMC,EAAYpB,EAAMkB,GAClBG,EAASC,OAAOF,GACtB,OAAIA,IAAcd,EAAmBc,GAC5B,IAAIG,MASjB,SAAoCC,EAAeL,GACjD,MAAQ,2CAA0CK,qBAAyBL,0EAI3DxB,OAdK8B,CAA2BJ,EAAQF,IAE/C,cAmBX,MAAMO,KAAO7B","sources":["./packages/react/separator/src/Separator.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n *  Separator\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Separator';\nconst DEFAULT_ORIENTATION = 'horizontal';\nconst ORIENTATIONS = ['horizontal', 'vertical'] as const;\n\ntype Orientation = typeof ORIENTATIONS[number];\ntype SeparatorElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface SeparatorProps extends PrimitiveDivProps {\n  /**\n   * Either `vertical` or `horizontal`. Defaults to `horizontal`.\n   */\n  orientation?: Orientation;\n  /**\n   * Whether or not the component is purely decorative. When true, accessibility-related attributes\n   * are updated so that that the rendered element is removed from the accessibility tree.\n   */\n  decorative?: boolean;\n}\n\nconst Separator = React.forwardRef<SeparatorElement, SeparatorProps>((props, forwardedRef) => {\n  const { decorative, orientation: orientationProp = DEFAULT_ORIENTATION, ...domProps } = props;\n  const orientation = isValidOrientation(orientationProp) ? orientationProp : DEFAULT_ORIENTATION;\n  // `aria-orientation` defaults to `horizontal` so we only need it if `orientation` is vertical\n  const ariaOrientation = orientation === 'vertical' ? orientation : undefined;\n  const semanticProps = decorative\n    ? { role: 'none' }\n    : { 'aria-orientation': ariaOrientation, role: 'separator' };\n\n  return (\n    <Primitive.div\n      data-orientation={orientation}\n      {...semanticProps}\n      {...domProps}\n      ref={forwardedRef}\n    />\n  );\n});\n\nSeparator.displayName = NAME;\n\nSeparator.propTypes = {\n  orientation(props, propName, componentName) {\n    const propValue = props[propName];\n    const strVal = String(propValue);\n    if (propValue && !isValidOrientation(propValue)) {\n      return new Error(getInvalidOrientationError(strVal, componentName));\n    }\n    return null;\n  },\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\n// Split this out for clearer readability of the error message.\nfunction getInvalidOrientationError(value: string, componentName: string) {\n  return `Invalid prop \\`orientation\\` of value \\`${value}\\` supplied to \\`${componentName}\\`, expected one of:\n  - horizontal\n  - vertical\n\nDefaulting to \\`${DEFAULT_ORIENTATION}\\`.`;\n}\n\nfunction isValidOrientation(orientation: any): orientation is Orientation {\n  return ORIENTATIONS.includes(orientation);\n}\n\nconst Root = Separator;\n\nexport {\n  Separator,\n  //\n  Root,\n};\nexport type { SeparatorProps };\n"],"names":["DEFAULT_ORIENTATION","ORIENTATIONS","Separator","React","forwardRef","props","forwardedRef","decorative","orientation","orientationProp","domProps","isValidOrientation","semanticProps","role","undefined","_react","createElement","Primitive","div","_babelRuntimeHelpersEsmExtends","ref","includes","propTypes","propName","componentName","propValue","strVal","String","Error","value","getInvalidOrientationError","Root"],"version":3,"file":"index.module.js.map"}