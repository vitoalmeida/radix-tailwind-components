{"mappings":"IAAgCA,mwBAAAA,8CAClBA,EAAEC,WAAaD,EAAEE,QAAUF,EAWzC,SAASG,EAAuBC,EAAMC,GAcpC,OAbAC,OAAOC,KAAKF,GAAQG,SAAQ,SAASC,GACvB,YAARA,GAA6B,eAARA,GAIzBH,OAAOI,eAAeN,EAAMK,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,SAKbL,ECFT,MAGOS,EAAsBC,GAAsBC,EAH9B,UAG+D,CAClFC,iCAEF,MAAMC,EAAiBD,KAchBE,EAAiBC,GACtBN,EArBmB,WA+BfO,EAAmCC,IACvC,MAAMC,eACJA,EADIC,SAEJA,EACAC,KAAMC,EAHFC,YAIJA,EAJIC,aAKJA,EALIC,MAMJA,GAAQ,GACNP,EACEQ,EAAcZ,EAAeK,GAC7BQ,EAAaC,EAAMC,OAA0B,OAC5CC,EAAiBC,GAAsBH,EAAMI,UAAS,IACtDX,GAAO,EAAOY,GAAWC,EAAqB,CACnDC,KAAMb,EACNc,YAAab,EACbc,SAAUb,iBAGZ,OACEc,EAAAC,cAACC,EAAgBC,KAASf,eACxBY,EAAAC,cAACG,EAAD,CACEC,MAAOxB,EACPyB,UAAWC,IACXlB,WAAYA,EACZN,KAAMA,EACNG,aAAcS,EACda,aAAclB,EAAMmB,aAAY,IAAMd,GAASe,IAAcA,KAAW,CAACf,IACzEH,gBAAiBA,EACjBmB,kBAAmBrB,EAAMmB,aAAY,IAAMhB,GAAmB,IAAO,IACrEmB,qBAAsBtB,EAAMmB,aAAY,IAAMhB,GAAmB,IAAQ,IACzEN,MAAOA,GAENL,uBAYT,MAMM+B,eAAgBvB,EAAMwB,YAC1B,CAAClC,EAAwCmC,KACvC,MAAMlC,eAAEA,KAAmBmC,GAAgBpC,EACrCqC,EAAUvC,EATA,gBAS+BG,GACzCO,EAAcZ,EAAeK,IAC7B8B,kBAAEA,EAAFC,qBAAqBA,GAAyBK,EAOpD,OALA3B,EAAM4B,WAAU,KACdP,IACO,IAAMC,MACZ,CAACD,EAAmBC,iBAEhBZ,EAAAC,cAACC,EAAgBiB,OAAjBC,EAAA,GAA4BhC,EAAiB4B,EAA7C,CAA0DK,IAAKN,gCAU1E,MAMMO,eAAiBhC,EAAMwB,YAC3B,CAAClC,EAAyCmC,KACxC,MAAMlC,eAAEA,KAAmB0C,GAAiB3C,EACtCqC,EAAUvC,EATC,iBAS+BG,GAC1CO,EAAcZ,EAAeK,GAC7B2C,EAAqBC,EAAgBV,EAAcE,EAAQ5B,YAE3DqC,eACJ1B,EAAAC,cAAC0B,EAAUC,OAAXR,EAAA,CACES,KAAK,SACL,gBAAc,SACd,gBAAeZ,EAAQlC,KACvB,gBAAekC,EAAQX,UACvB,aAAYwB,EAASb,EAAQlC,OACzBwC,EANN,CAOEF,IAAKG,EACLO,QAASC,EAAqBpD,EAAMmD,QAASd,EAAQT,iBAIzD,OAAOS,EAAQzB,gBACbkC,eAEA1B,EAAAC,cAACC,EAAgBiB,OAAjBC,EAAA,CAAwBa,SAAO,GAAK7C,GACjCsC,+BAYT,MAUMQ,eAAiB5C,EAAMwB,YAC3B,CAAClC,EAAyCmC,KACxC,MAAMoB,WAAEA,KAAeC,GAAiBxD,EAClCqC,EAAUvC,EAbC,iBAa+BE,EAAMC,6BACtD,OACEmB,EAAAC,cAACoC,EAAD,CAAUC,QAASH,GAAclB,EAAQlC,MACtCkC,EAAQ9B,mBACPa,EAAAC,cAACsC,EAADnB,EAAA,GAAyBgB,EAAzB,CAAuCf,IAAKN,kBAE5Cf,EAAAC,cAACuC,EAADpB,EAAA,GAA4BgB,EAA5B,CAA0Cf,IAAKN,kCA0BzD,MAAM0B,eAAsBnD,EAAMwB,YAChC,CAAClC,EAA6CmC,KAC5C,MAAM2B,eAAEA,EAAFC,UAAkBA,GAAY,KAASC,GAAsBhE,EAC7DqC,EAAUvC,EAhDC,iBAgD+BE,EAAMC,gBAChDgE,EAAavD,EAAMC,OAAuB,MAC1CuD,EAAerB,EAAgBV,EAAc8B,GAC7CE,EAAyBzD,EAAMC,QAAO,GAG5CD,EAAM4B,WAAU,KACd,MAAM8B,EAAUH,EAAWI,QAC3B,GAAID,EAAS,OAAOE,EAAWF,KAC9B,IAEH,MAAMG,EAAgBR,EAAYS,EAAS9D,EAAM+D,sBAEjD,OACErD,EAAAC,cAACkD,EAAD,kBACEnD,EAAAC,cAACqD,EAAD,CAAcZ,eAAgBA,gBAC5B1C,EAAAC,cAACsD,EAADnC,EAAA,GACMwB,EADN,CAEEvB,IAAKyB,EAGLU,UAAWvC,EAAQlC,KACnB0E,6BAA2B,EAC3BC,iBAAkB1B,EAAqBpD,EAAM8E,kBAAmBC,IAAU,IAAAC,EACxED,EAAME,iBACDd,EAAuBE,SAAS,QAAAW,EAAA3C,EAAQ5B,WAAW4D,eAAnB,IAAAW,GAAAA,EAA4BE,WAEnEC,qBAAsB/B,EACpBpD,EAAMmF,sBACLJ,IACC,MAAMK,EAAgBL,EAAMM,OAAOD,cAC7BE,EAAyC,IAAzBF,EAAcpC,SAA0C,IAA1BoC,EAAcG,QAC5DC,EAAwC,IAAzBJ,EAAcpC,QAAgBsC,EAEnDnB,EAAuBE,QAAUmB,IAEnC,CAAEC,0BAA0B,IAI9BC,eAAgBtC,EACdpD,EAAM0F,gBACLX,GAAUA,EAAME,kBACjB,CAAEQ,0BAA0B,YASpCE,eAAyBjF,EAAMwB,YACnC,CAAClC,EAA6CmC,KAC5C,MAAM4B,UAAEA,GAAY,KAAS6B,GAAyB5F,EAChDqC,EAAUvC,EAvGC,iBAuG+BE,EAAMC,gBAChD4F,EAA0BnF,EAAMC,QAAO,GAEvC4D,EAAgBR,EAAYS,EAAS9D,EAAM+D,sBAEjD,OACErD,EAAAC,cAACkD,EAAD,kBACEnD,EAAAC,cAACsD,EAADnC,EAAA,GACMoD,EADN,CAEEnD,IAAKN,EACLyC,WAAW,EACXC,6BAA6B,EAC7BC,iBAAmBC,IAAU,IAAAe,EAGEC,GAF7B,QAAAD,EAAA9F,EAAM8E,wBAAN,IAAAgB,GAAAA,EAAAE,KAAAhG,EAAyB+E,GAEpBA,EAAMkB,oBACJJ,EAAwBxB,SAAS,QAAA0B,EAAA1D,EAAQ5B,WAAW4D,eAAnB,IAAA0B,GAAAA,EAA4Bb,QAElEH,EAAME,kBAGRY,EAAwBxB,SAAU,GAEpC6B,kBAAoBnB,IAAU,IAAAoB,EAAAC,EAC5B,QAAAD,EAAAnG,EAAMkG,yBAAN,IAAAC,GAAAA,EAAAH,KAAAhG,EAA0B+E,GAErBA,EAAMkB,mBAAkBJ,EAAwBxB,SAAU,GAQ/D,MAAMgC,EAAStB,EAAMsB,QACA,QAAAD,EAAG/D,EAAQ5B,WAAW4D,eAAtB,IAAA+B,OAAA,EAAGA,EAA4BE,SAASD,KACxCtB,EAAME,yBAoCjCsB,eAAqB7F,EAAMwB,YAC/B,CAAClC,EAA6CmC,KAC5C,MAAMlC,eACJA,EADI2E,UAEJA,EAFI4B,gBAGJA,EAHI1B,iBAIJA,EAJID,4BAKJA,EALI4B,gBAMJA,EANItB,qBAOJA,EAPIO,eAQJA,EARIQ,kBASJA,KACG1C,GACDxD,EACEqC,EAAUvC,EA7LC,iBA6L+BG,GAC1CO,EAAcZ,EAAeK,GAMnC,OAFAyG,iBAGEtF,EAAAC,cAACsF,EAAD,CACEtD,SAAO,EACPuD,MAAI,EACJC,QAASjC,EACTkC,iBAAkBN,EAClBO,mBAAoBjC,gBAEpB1D,EAAAC,cAAC2F,EAAD,CACE3D,SAAO,EACPwB,4BAA6BA,EAC7BqB,kBAAmBA,EACnBO,gBAAiBA,EACjBtB,qBAAsBA,EACtBO,eAAgBA,EAChBuB,UAAW,IAAM5E,EAAQ/B,cAAa,iBAEtCc,EAAAC,cAACC,EAAgB4F,QAAjB1E,EAAA,CACE,aAAYU,EAASb,EAAQlC,MAC7BgH,KAAK,SACLC,GAAI/E,EAAQX,WACRlB,EACAgD,EALN,CAMEf,IAAKN,EACLkF,MAAO,IACF7D,EAAa6D,MAEhB,2CACE,gDAkBVC,eAAe5G,EAAMwB,YACzB,CAAClC,EAAuCmC,KACtC,MAAMlC,eAAEA,KAAmBsH,GAAevH,EACpCqC,EAAUvC,EARD,eAQ+BG,gBAC9C,OACEmB,EAAAC,cAAC0B,EAAUC,OAAXR,EAAA,CACES,KAAK,UACDsE,EAFN,CAGE9E,IAAKN,EACLgB,QAASC,EAAqBpD,EAAMmD,SAAS,IAAMd,EAAQ/B,cAAa,kCAYhF,MAMMkH,eAAe9G,EAAMwB,YACzB,CAAClC,EAAuCmC,KACtC,MAAMlC,eAAEA,KAAmBwH,GAAezH,EACpCQ,EAAcZ,EAAeK,gBACnC,OAAOmB,EAAAC,cAACC,EAAgBoG,MAAjBlF,EAAA,GAA2BhC,EAAiBiH,EAA5C,CAAwDhF,IAAKN,QAQxE,SAASe,EAAS/C,GAChB,OAAOA,EAAO,OAAS,gCAGzB,MAAMoB,EAAOxB,iBACb,MAAMwC,EAASN,mBACf,MAAM0F,EAAUjF,oBAChB,MAAMwE,EAAU5D,oBAChB,MAAMsE,EAAQN,kBACd,MAAMI,EAAQF","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/popover/src/Popover.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal } from '@radix-ui/react-portal';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useId } from '@radix-ui/react-id';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Popover\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPOVER_NAME = 'Popover';\n\ntype ScopedProps<P> = P & { __scopePopover?: Scope };\nconst [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype PopoverContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  hasCustomAnchor: boolean;\n  onCustomAnchorAdd(): void;\n  onCustomAnchorRemove(): void;\n  modal: boolean;\n};\n\nconst [PopoverProvider, usePopoverContext] =\n  createPopoverContext<PopoverContextValue>(POPOVER_NAME);\n\ninterface PopoverProps {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  modal?: boolean;\n  children?: React.ReactNode;\n}\n\nconst Popover: React.FC<PopoverProps> = (props: ScopedProps<PopoverProps>) => {\n  const {\n    __scopePopover,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = false,\n  } = props;\n  const popperScope = usePopperScope(__scopePopover);\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [hasCustomAnchor, setHasCustomAnchor] = React.useState(false);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <PopoverProvider\n        scope={__scopePopover}\n        contentId={useId()}\n        triggerRef={triggerRef}\n        open={open}\n        onOpenChange={setOpen}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n        hasCustomAnchor={hasCustomAnchor}\n        onCustomAnchorAdd={React.useCallback(() => setHasCustomAnchor(true), [])}\n        onCustomAnchorRemove={React.useCallback(() => setHasCustomAnchor(false), [])}\n        modal={modal}\n      >\n        {children}\n      </PopoverProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nPopover.displayName = POPOVER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverAnchor\n * -----------------------------------------------------------------------------------------------*/\n\nconst ANCHOR_NAME = 'PopoverAnchor';\n\ntype PopoverAnchorElement = React.ElementRef<typeof PopperPrimitive.Anchor>;\ntype PopperAnchorProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Anchor>;\ninterface PopoverAnchorProps extends PopperAnchorProps {}\n\nconst PopoverAnchor = React.forwardRef<PopoverAnchorElement, PopoverAnchorProps>(\n  (props: ScopedProps<PopoverAnchorProps>, forwardedRef) => {\n    const { __scopePopover, ...anchorProps } = props;\n    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;\n\n    React.useEffect(() => {\n      onCustomAnchorAdd();\n      return () => onCustomAnchorRemove();\n    }, [onCustomAnchorAdd, onCustomAnchorRemove]);\n\n    return <PopperPrimitive.Anchor {...popperScope} {...anchorProps} ref={forwardedRef} />;\n  }\n);\n\nPopoverAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'PopoverTrigger';\n\ntype PopoverTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface PopoverTriggerProps extends PrimitiveButtonProps {}\n\nconst PopoverTrigger = React.forwardRef<PopoverTriggerElement, PopoverTriggerProps>(\n  (props: ScopedProps<PopoverTriggerProps>, forwardedRef) => {\n    const { __scopePopover, ...triggerProps } = props;\n    const context = usePopoverContext(TRIGGER_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n\n    const trigger = (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n\n    return context.hasCustomAnchor ? (\n      trigger\n    ) : (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        {trigger}\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nPopoverTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'PopoverContent';\n\ninterface PopoverContentProps extends PopoverContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst PopoverContent = React.forwardRef<PopoverContentTypeElement, PopoverContentProps>(\n  (props: ScopedProps<PopoverContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <PopoverContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <PopoverContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nPopoverContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype RemoveScrollProps = React.ComponentProps<typeof RemoveScroll>;\ntype PopoverContentTypeElement = PopoverContentImplElement;\ninterface PopoverContentTypeProps\n  extends Omit<PopoverContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {\n  /**\n   * @see https://github.com/theKashey/react-remove-scroll#usage\n   */\n  allowPinchZoom?: RemoveScrollProps['allowPinchZoom'];\n  /**\n   * Whether the `Popover` should render in a `Portal`\n   * (default: `true`)\n   */\n  portalled?: boolean;\n}\n\nconst PopoverContentModal = React.forwardRef<PopoverContentTypeElement, PopoverContentTypeProps>(\n  (props: ScopedProps<PopoverContentTypeProps>, forwardedRef) => {\n    const { allowPinchZoom, portalled = true, ...contentModalProps } = props;\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const isRightClickOutsideRef = React.useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    const PortalWrapper = portalled ? Portal : React.Fragment;\n\n    return (\n      <PortalWrapper>\n        <RemoveScroll allowPinchZoom={allowPinchZoom}>\n          <PopoverContentImpl\n            {...contentModalProps}\n            ref={composedRefs}\n            // we make sure we're not trapping once it's been closed\n            // (closed !== unmounted when animating out)\n            trapFocus={context.open}\n            disableOutsidePointerEvents\n            onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n              event.preventDefault();\n              if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();\n            })}\n            onPointerDownOutside={composeEventHandlers(\n              props.onPointerDownOutside,\n              (event) => {\n                const originalEvent = event.detail.originalEvent;\n                const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n                const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n                isRightClickOutsideRef.current = isRightClick;\n              },\n              { checkForDefaultPrevented: false }\n            )}\n            // When focus is trapped, a `focusout` event may still happen.\n            // We make sure we don't trigger our `onDismiss` in such case.\n            onFocusOutside={composeEventHandlers(\n              props.onFocusOutside,\n              (event) => event.preventDefault(),\n              { checkForDefaultPrevented: false }\n            )}\n          />\n        </RemoveScroll>\n      </PortalWrapper>\n    );\n  }\n);\n\nconst PopoverContentNonModal = React.forwardRef<PopoverContentTypeElement, PopoverContentTypeProps>(\n  (props: ScopedProps<PopoverContentTypeProps>, forwardedRef) => {\n    const { portalled = true, ...contentNonModalProps } = props;\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    const PortalWrapper = portalled ? Portal : React.Fragment;\n\n    return (\n      <PortalWrapper>\n        <PopoverContentImpl\n          {...contentNonModalProps}\n          ref={forwardedRef}\n          trapFocus={false}\n          disableOutsidePointerEvents={false}\n          onCloseAutoFocus={(event) => {\n            props.onCloseAutoFocus?.(event);\n\n            if (!event.defaultPrevented) {\n              if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n              // Always prevent auto focus because we either focus manually or want user agent focus\n              event.preventDefault();\n            }\n\n            hasInteractedOutsideRef.current = false;\n          }}\n          onInteractOutside={(event) => {\n            props.onInteractOutside?.(event);\n\n            if (!event.defaultPrevented) hasInteractedOutsideRef.current = true;\n\n            // Prevent dismissing when clicking the trigger.\n            // As the trigger is already setup to close, without doing so would\n            // cause it to close and immediately open.\n            //\n            // We use `onInteractOutside` as some browsers also\n            // focus on pointer down, creating the same issue.\n            const target = event.target as HTMLElement;\n            const targetIsTrigger = context.triggerRef.current?.contains(target);\n            if (targetIsTrigger) event.preventDefault();\n          }}\n        />\n      </PortalWrapper>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PopoverContentImplElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface PopoverContentImplProps\n  extends PopperContentProps,\n    Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * Whether focus should be trapped within the `Popover`\n   * (default: false)\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst PopoverContentImpl = React.forwardRef<PopoverContentImplElement, PopoverContentImplProps>(\n  (props: ScopedProps<PopoverContentImplProps>, forwardedRef) => {\n    const {\n      __scopePopover,\n      trapFocus,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      disableOutsidePointerEvents,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      ...contentProps\n    } = props;\n    const context = usePopoverContext(CONTENT_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n\n    // Make sure the whole tree has focus guards as our `Popover` may be\n    // the last element in the DOM (beacuse of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <FocusScope\n        asChild\n        loop\n        trapped={trapFocus}\n        onMountAutoFocus={onOpenAutoFocus}\n        onUnmountAutoFocus={onCloseAutoFocus}\n      >\n        <DismissableLayer\n          asChild\n          disableOutsidePointerEvents={disableOutsidePointerEvents}\n          onInteractOutside={onInteractOutside}\n          onEscapeKeyDown={onEscapeKeyDown}\n          onPointerDownOutside={onPointerDownOutside}\n          onFocusOutside={onFocusOutside}\n          onDismiss={() => context.onOpenChange(false)}\n        >\n          <PopperPrimitive.Content\n            data-state={getState(context.open)}\n            role=\"dialog\"\n            id={context.contentId}\n            {...popperScope}\n            {...contentProps}\n            ref={forwardedRef}\n            style={{\n              ...contentProps.style,\n              // re-namespace exposed content custom property\n              ['--radix-popover-content-transform-origin' as any]:\n                'var(--radix-popper-transform-origin)',\n            }}\n          />\n        </DismissableLayer>\n      </FocusScope>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'PopoverClose';\n\ntype PopoverCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface PopoverCloseProps extends PrimitiveButtonProps {}\n\nconst PopoverClose = React.forwardRef<PopoverCloseElement, PopoverCloseProps>(\n  (props: ScopedProps<PopoverCloseProps>, forwardedRef) => {\n    const { __scopePopover, ...closeProps } = props;\n    const context = usePopoverContext(CLOSE_NAME, __scopePopover);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nPopoverClose.displayName = CLOSE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'PopoverArrow';\n\ntype PopoverArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface PopoverArrowProps extends PopperArrowProps {}\n\nconst PopoverArrow = React.forwardRef<PopoverArrowElement, PopoverArrowProps>(\n  (props: ScopedProps<PopoverArrowProps>, forwardedRef) => {\n    const { __scopePopover, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopePopover);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nPopoverArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Popover;\nconst Anchor = PopoverAnchor;\nconst Trigger = PopoverTrigger;\nconst Content = PopoverContent;\nconst Close = PopoverClose;\nconst Arrow = PopoverArrow;\n\nexport {\n  createPopoverScope,\n  //\n  Popover,\n  PopoverAnchor,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverClose,\n  PopoverArrow,\n  //\n  Root,\n  Anchor,\n  Trigger,\n  Content,\n  Close,\n  Arrow,\n};\nexport type {\n  PopoverProps,\n  PopoverAnchorProps,\n  PopoverTriggerProps,\n  PopoverContentProps,\n  PopoverCloseProps,\n  PopoverArrowProps,\n};\n"],"names":["a","__esModule","default","$parcel$exportWildcard","dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","createPopoverContext","createPopoverScope","createContextScope","createPopperScope","usePopperScope","PopoverProvider","usePopoverContext","Popover","props","__scopePopover","children","open","openProp","defaultOpen","onOpenChange","modal","popperScope","triggerRef","React","useRef","hasCustomAnchor","setHasCustomAnchor","useState","setOpen","useControllableState","prop","defaultProp","onChange","_react","createElement","_radixUiReactPopper","Root","$bb8ca9d5c97a93670591f7c54ba$var$PopoverProvider","scope","contentId","useId","onOpenToggle","useCallback","prevOpen","onCustomAnchorAdd","onCustomAnchorRemove","PopoverAnchor","forwardRef","forwardedRef","anchorProps","context","useEffect","Anchor","_babelRuntimeHelpersExtends","ref","PopoverTrigger","triggerProps","composedTriggerRef","useComposedRefs","trigger","Primitive","button","type","getState","onClick","composeEventHandlers","asChild","PopoverContent","forceMount","contentProps","Presence","present","$bb8ca9d5c97a93670591f7c54ba$var$PopoverContentModal","$bb8ca9d5c97a93670591f7c54ba$var$PopoverContentNonModal","PopoverContentModal","allowPinchZoom","portalled","contentModalProps","contentRef","composedRefs","isRightClickOutsideRef","content","current","hideOthers","PortalWrapper","Portal","Fragment","RemoveScroll","$bb8ca9d5c97a93670591f7c54ba$var$PopoverContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","_context$triggerRef$c","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","isRightClick","checkForDefaultPrevented","onFocusOutside","PopoverContentNonModal","contentNonModalProps","hasInteractedOutsideRef","_props$onCloseAutoFoc","_context$triggerRef$c2","call","defaultPrevented","onInteractOutside","_props$onInteractOuts","_context$triggerRef$c3","target","contains","PopoverContentImpl","onOpenAutoFocus","onEscapeKeyDown","useFocusGuards","FocusScope","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","DismissableLayer","onDismiss","Content","role","id","style","PopoverClose","closeProps","PopoverArrow","arrowProps","Arrow","Trigger","Close"],"version":3,"file":"index.js.map"}