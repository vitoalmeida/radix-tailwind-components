import{Primitive as e}from"@radix-ui/react-primitive";import{createContextScope as r}from"@radix-ui/react-context";import*as t from"react";import a from"@babel/runtime/helpers/esm/extends";const[n,o]=r("Progress");export{o as createProgressScope};const[s,i]=n("Progress");export const Progress=/*#__PURE__*/t.forwardRef(((r,n)=>{const{__scopeProgress:o,value:i,max:d,getValueLabel:v=u,...f}=r,x=p(d)?d:100,g=c(i,x)?i:null,P=m(g)?v(g,x):void 0;/*#__PURE__*/return t.createElement(s,{scope:o,value:g,max:x},/*#__PURE__*/t.createElement(e.div,a({"aria-valuemax":x,"aria-valuemin":0,"aria-valuenow":m(g)?g:void 0,"aria-valuetext":P,role:"progressbar","data-state":l(g,x),"data-value":null!=g?g:void 0,"data-max":x},f,{ref:n})))}));/*#__PURE__*/Progress.propTypes={max(e,r,t){const a=e[r],n=String(a);return a&&!p(a)?new Error(function(e,r){return`Invalid prop \`max\` of value \`${e}\` supplied to \`${r}\`. Only numbers greater than 0 are valid max values. Defaulting to \`100\`.`}(n,t)):null},value(e,r,t){const a=e[r],n=String(a),o=p(e.max)?e.max:100;return null==a||c(a,o)?null:new Error(function(e,r){return`Invalid prop \`value\` of value \`${e}\` supplied to \`${r}\`. The \`value\` prop must be:\n  - a positive number\n  - less than the value passed to \`max\` (or 100 if no \`max\` prop is set)\n  - \`null\` if the progress is indeterminate.\n\nDefaulting to \`null\`.`}(n,t))}};export const ProgressIndicator=/*#__PURE__*/t.forwardRef(((r,n)=>{var o;const{__scopeProgress:s,...u}=r,m=i("ProgressIndicator",s);/*#__PURE__*/return t.createElement(e.div,a({"data-state":l(m.value,m.max),"data-value":null!==(o=m.value)&&void 0!==o?o:void 0,"data-max":m.max},u,{ref:n}))}));/*#__PURE__*/function u(e,r){return`${Math.round(e/r*100)}%`}function l(e,r){return null==e?"indeterminate":e===r?"complete":"loading"}function m(e){return"number"==typeof e}function p(e){return m(e)&&!isNaN(e)&&e>0}function c(e,r){return m(e)&&!isNaN(e)&&e<=r&&e>=0}export const Root=Progress;export const Indicator=ProgressIndicator;
//# sourceMappingURL=index.module.js.map
