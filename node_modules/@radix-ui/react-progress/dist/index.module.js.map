{"mappings":"6LAWA,MAIOA,EAAuBC,GAAuBC,EAJ/B,6CAQtB,MAAOC,EAAkBC,GACvBJ,EAToB,mBAmBtB,MAAMK,sBAAWC,EAAMC,YACrB,CAACC,EAAmCC,KAClC,MAAMC,gBACJA,EACAC,MAAOC,EACPC,IAAKC,EAHDC,cAIJA,EAAgBC,KACbC,GACDT,EAEEK,EAAMK,EAAiBJ,GAAWA,EA5BxB,IA6BVH,EAAQQ,EAAmBP,EAAWC,GAAOD,EAAY,KACzDQ,EAAaC,EAASV,GAASI,EAAcJ,EAAOE,QAAOS,eAEjE,OACEC,EAAAC,cAACC,EAAD,CAAkBC,MAAOhB,EAAiBC,MAAOA,EAAOE,IAAKA,gBAC3DU,EAAAC,cAACG,EAAUC,IAAXC,EAAA,CACE,gBAAehB,EACf,gBAAe,EACf,gBAAeQ,EAASV,GAASA,OAAQW,EACzC,iBAAgBF,EAChBU,KAAK,cACL,aAAYC,EAAiBpB,EAAOE,GACpC,aAAYF,MAAAA,EAAAA,OAASW,EACrB,WAAUT,GACNI,EATN,CAUEe,IAAKvB,sBASfJ,SAAS4B,UAAY,CACnBpB,IAAIL,EAAO0B,EAAUC,GACnB,MAAMC,EAAY5B,EAAM0B,GAClBG,EAASC,OAAOF,GACtB,OAAIA,IAAclB,EAAiBkB,GAC1B,IAAIG,MA4EjB,SAA4BH,EAAmBD,GAC7C,MAAQ,mCAAkCC,qBAA6BD,gFA7ElDK,CAAmBH,EAAQF,IAEvC,MAETxB,MAAMH,EAAO0B,EAAUC,GACrB,MAAMvB,EAAYJ,EAAM0B,GAClBG,EAASC,OAAO1B,GAChBC,EAAMK,EAAiBV,EAAMK,KAAOL,EAAMK,IAjEhC,IAkEhB,OAAiB,MAAbD,GAAsBO,EAAmBP,EAAWC,GAGjD,KAFE,IAAI0B,MAuEjB,SAA8BH,EAAmBD,GAC/C,MAAQ,qCAAoCC,qBAA6BD,mNAxEpDM,CAAqBJ,EAAQF,aAepD,MAAMO,+BAAoBpC,EAAMC,YAC9B,CAACC,EAA4CC,KAAiB,IAAAkC,EAC5D,MAAMjC,gBAAEA,KAAoBkC,GAAmBpC,EACzCqC,EAAUzC,EARG,oBAQgCM,gBACnD,OACEa,EAAAC,cAACG,EAAUC,IAAXC,EAAA,CACE,aAAYE,EAAiBc,EAAQlC,MAAOkC,EAAQhC,KACpD,aAAA,QAAA8B,EAAYE,EAAQlC,aAApB,IAAAgC,EAAAA,OAA6BrB,EAC7B,WAAUuB,EAAQhC,KACd+B,EAJN,CAKEZ,IAAKvB,qBAUb,SAASO,EAAqBL,EAAeE,GAC3C,MAAQ,GAAEiC,KAAKC,MAAOpC,EAAQE,EAAO,QAGvC,SAASkB,EAAiBpB,EAAkCqC,GAC1D,OAAgB,MAATrC,EAAgB,gBAAkBA,IAAUqC,EAAW,WAAa,UAG7E,SAAS3B,EAASV,GAChB,MAAwB,iBAAVA,EAGhB,SAASO,EAAiBL,GAExB,OACEQ,EAASR,KACRoC,MAAMpC,IACPA,EAAM,EAIV,SAASM,EAAmBR,EAAYE,GAEtC,OACEQ,EAASV,KACRsC,MAAMtC,IACPA,GAASE,GACTF,GAAS,SAkBb,MAAMuC,KAAO7C,gBACb,MAAM8C,UAAYT","sources":["./packages/react/progress/src/Progress.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Progress\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROGRESS_NAME = 'Progress';\nconst DEFAULT_MAX = 100;\n\ntype ScopedProps<P> = P & { __scopeProgress?: Scope };\nconst [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);\n\ntype ProgressState = 'indeterminate' | 'complete' | 'loading';\ntype ProgressContextValue = { value: number | null; max: number };\nconst [ProgressProvider, useProgressContext] =\n  createProgressContext<ProgressContextValue>(PROGRESS_NAME);\n\ntype ProgressElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ProgressProps extends PrimitiveDivProps {\n  value?: number | null | undefined;\n  max?: number;\n  getValueLabel?(value: number, max: number): string;\n}\n\nconst Progress = React.forwardRef<ProgressElement, ProgressProps>(\n  (props: ScopedProps<ProgressProps>, forwardedRef) => {\n    const {\n      __scopeProgress,\n      value: valueProp,\n      max: maxProp,\n      getValueLabel = defaultGetValueLabel,\n      ...progressProps\n    } = props;\n\n    const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;\n    const value = isValidValueNumber(valueProp, max) ? valueProp : null;\n    const valueLabel = isNumber(value) ? getValueLabel(value, max) : undefined;\n\n    return (\n      <ProgressProvider scope={__scopeProgress} value={value} max={max}>\n        <Primitive.div\n          aria-valuemax={max}\n          aria-valuemin={0}\n          aria-valuenow={isNumber(value) ? value : undefined}\n          aria-valuetext={valueLabel}\n          role=\"progressbar\"\n          data-state={getProgressState(value, max)}\n          data-value={value ?? undefined}\n          data-max={max}\n          {...progressProps}\n          ref={forwardedRef}\n        />\n      </ProgressProvider>\n    );\n  }\n);\n\nProgress.displayName = PROGRESS_NAME;\n\nProgress.propTypes = {\n  max(props, propName, componentName) {\n    const propValue = props[propName];\n    const strVal = String(propValue);\n    if (propValue && !isValidMaxNumber(propValue)) {\n      return new Error(getInvalidMaxError(strVal, componentName));\n    }\n    return null;\n  },\n  value(props, propName, componentName) {\n    const valueProp = props[propName];\n    const strVal = String(valueProp);\n    const max = isValidMaxNumber(props.max) ? props.max : DEFAULT_MAX;\n    if (valueProp != null && !isValidValueNumber(valueProp, max)) {\n      return new Error(getInvalidValueError(strVal, componentName));\n    }\n    return null;\n  },\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProgressIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'ProgressIndicator';\n\ntype ProgressIndicatorElement = React.ElementRef<typeof Primitive.div>;\ninterface ProgressIndicatorProps extends PrimitiveDivProps {}\n\nconst ProgressIndicator = React.forwardRef<ProgressIndicatorElement, ProgressIndicatorProps>(\n  (props: ScopedProps<ProgressIndicatorProps>, forwardedRef) => {\n    const { __scopeProgress, ...indicatorProps } = props;\n    const context = useProgressContext(INDICATOR_NAME, __scopeProgress);\n    return (\n      <Primitive.div\n        data-state={getProgressState(context.value, context.max)}\n        data-value={context.value ?? undefined}\n        data-max={context.max}\n        {...indicatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nProgressIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction defaultGetValueLabel(value: number, max: number) {\n  return `${Math.round((value / max) * 100)}%`;\n}\n\nfunction getProgressState(value: number | undefined | null, maxValue: number): ProgressState {\n  return value == null ? 'indeterminate' : value === maxValue ? 'complete' : 'loading';\n}\n\nfunction isNumber(value: any): value is number {\n  return typeof value === 'number';\n}\n\nfunction isValidMaxNumber(max: any): max is number {\n  // prettier-ignore\n  return (\n    isNumber(max) &&\n    !isNaN(max) &&\n    max > 0\n  );\n}\n\nfunction isValidValueNumber(value: any, max: number): value is number {\n  // prettier-ignore\n  return (\n    isNumber(value) &&\n    !isNaN(value) &&\n    value <= max &&\n    value >= 0\n  );\n}\n\n// Split this out for clearer readability of the error message.\nfunction getInvalidMaxError(propValue: string, componentName: string) {\n  return `Invalid prop \\`max\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. Only numbers greater than 0 are valid max values. Defaulting to \\`${DEFAULT_MAX}\\`.`;\n}\n\nfunction getInvalidValueError(propValue: string, componentName: string) {\n  return `Invalid prop \\`value\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. The \\`value\\` prop must be:\n  - a positive number\n  - less than the value passed to \\`max\\` (or ${DEFAULT_MAX} if no \\`max\\` prop is set)\n  - \\`null\\` if the progress is indeterminate.\n\nDefaulting to \\`null\\`.`;\n}\n\nconst Root = Progress;\nconst Indicator = ProgressIndicator;\n\nexport {\n  createProgressScope,\n  //\n  Progress,\n  ProgressIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { ProgressProps, ProgressIndicatorProps };\n"],"names":["createProgressContext","createProgressScope","createContextScope","ProgressProvider","useProgressContext","Progress","React","forwardRef","props","forwardedRef","__scopeProgress","value","valueProp","max","maxProp","getValueLabel","defaultGetValueLabel","progressProps","isValidMaxNumber","isValidValueNumber","valueLabel","isNumber","undefined","_react","createElement","$fc61ea0f5d6587188592ef12afccad3f$var$ProgressProvider","scope","Primitive","div","_babelRuntimeHelpersEsmExtends","role","getProgressState","ref","propTypes","propName","componentName","propValue","strVal","String","Error","getInvalidMaxError","getInvalidValueError","ProgressIndicator","_context$value","indicatorProps","context","Math","round","maxValue","isNaN","Root","Indicator"],"version":3,"file":"index.module.js.map"}