{"mappings":"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","sources":["./packages/react/hover-card/src/HoverCard.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCard\n * -----------------------------------------------------------------------------------------------*/\n\nconst HOVERCARD_NAME = 'HoverCard';\n\ntype ScopedProps<P> = P & { __scopeHoverCard?: Scope };\nconst [createHoverCardContext, createHoverCardScope] = createContextScope(HOVERCARD_NAME, [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype HoverCardContextValue = {\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpen(): void;\n  onClose(): void;\n  onDismiss(): void;\n};\n\nconst [HoverCardProvider, useHoverCardContext] =\n  createHoverCardContext<HoverCardContextValue>(HOVERCARD_NAME);\n\ninterface HoverCardProps {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  openDelay?: number;\n  closeDelay?: number;\n  children?: React.ReactNode;\n}\n\nconst HoverCard: React.FC<HoverCardProps> = (props: ScopedProps<HoverCardProps>) => {\n  const {\n    __scopeHoverCard,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    openDelay = 700,\n    closeDelay = 300,\n  } = props;\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const openTimerRef = React.useRef(0);\n  const closeTimerRef = React.useRef(0);\n\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  const handleOpen = React.useCallback(() => {\n    clearTimeout(closeTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => setOpen(true), openDelay);\n  }, [openDelay, setOpen]);\n\n  const handleClose = React.useCallback(() => {\n    clearTimeout(openTimerRef.current);\n    closeTimerRef.current = window.setTimeout(() => setOpen(false), closeDelay);\n  }, [closeDelay, setOpen]);\n\n  const handleDismiss = React.useCallback(() => setOpen(false), [setOpen]);\n\n  // cleanup any queued state updates on unmount\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(openTimerRef.current);\n      clearTimeout(closeTimerRef.current);\n    };\n  }, []);\n\n  return (\n    <HoverCardProvider\n      scope={__scopeHoverCard}\n      open={open}\n      onOpenChange={setOpen}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      onDismiss={handleDismiss}\n    >\n      <PopperPrimitive.Root {...popperScope}>{children}</PopperPrimitive.Root>\n    </HoverCardProvider>\n  );\n};\n\nHoverCard.displayName = HOVERCARD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'HoverCardTrigger';\n\ntype HoverCardTriggerElement = React.ElementRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = Radix.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface HoverCardTriggerProps extends PrimitiveLinkProps {}\n\nconst HoverCardTrigger = React.forwardRef<HoverCardTriggerElement, HoverCardTriggerProps>(\n  (props: ScopedProps<HoverCardTriggerProps>, forwardedRef) => {\n    const { __scopeHoverCard, ...triggerProps } = props;\n    const context = useHoverCardContext(TRIGGER_NAME, __scopeHoverCard);\n    const popperScope = usePopperScope(__scopeHoverCard);\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.a\n          data-state={context.open ? 'open' : 'closed'}\n          {...triggerProps}\n          ref={forwardedRef}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n          onFocus={composeEventHandlers(props.onFocus, context.onOpen)}\n          onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n          // prevent focus event on touch devices\n          onTouchStart={composeEventHandlers(props.onTouchStart, (event) => event.preventDefault())}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nHoverCardTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'HoverCardContent';\n\ntype HoverCardContentElement = HoverCardContentImplElement;\ninterface HoverCardContentProps extends HoverCardContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst HoverCardContent = React.forwardRef<HoverCardContentElement, HoverCardContentProps>(\n  (props: ScopedProps<HoverCardContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useHoverCardContext(CONTENT_NAME, props.__scopeHoverCard);\n    return (\n      <Presence present={forceMount || context.open}>\n        <HoverCardContentImpl\n          data-state={context.open ? 'open' : 'closed'}\n          {...contentProps}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nHoverCardContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype HoverCardContentImplElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface HoverCardContentImplProps extends PopperContentProps {\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `HoverCard`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n  /**\n   * Event handler called when the focus moves outside of the `HoverCard`.\n   * Can be prevented.\n   */\n  onFocusOutside?: DismissableLayerProps['onFocusOutside'];\n  /**\n   * Event handler called when an interaction happens outside the `HoverCard`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: DismissableLayerProps['onInteractOutside'];\n  /**\n   * Whether the `HoverCard` should render in a `Portal`\n   * (default: `true`)\n   */\n  portalled?: boolean;\n}\n\nconst HoverCardContentImpl = React.forwardRef<\n  HoverCardContentImplElement,\n  HoverCardContentImplProps\n>((props: ScopedProps<HoverCardContentImplProps>, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    portalled = true,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    ...contentProps\n  } = props;\n  const context = useHoverCardContext(CONTENT_NAME, __scopeHoverCard);\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const ref = React.useRef<HoverCardContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const PortalWrapper = portalled ? Portal : React.Fragment;\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const tabbables = getTabbableNodes(ref.current);\n      tabbables.forEach((tabbable) => tabbable.setAttribute('tabindex', '-1'));\n    }\n  });\n\n  return (\n    <PortalWrapper>\n      <DismissableLayer\n        asChild\n        disableOutsidePointerEvents={false}\n        onInteractOutside={onInteractOutside}\n        onEscapeKeyDown={onEscapeKeyDown}\n        onPointerDownOutside={onPointerDownOutside}\n        onFocusOutside={onFocusOutside}\n        onDismiss={context.onDismiss}\n      >\n        <PopperPrimitive.Content\n          {...popperScope}\n          {...contentProps}\n          ref={composedRefs}\n          style={{\n            ...contentProps.style,\n            // re-namespace exposed content custom property\n            ['--radix-hover-card-content-transform-origin' as any]:\n              'var(--radix-popper-transform-origin)',\n          }}\n        />\n      </DismissableLayer>\n    </PortalWrapper>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'HoverCardArrow';\n\ntype HoverCardArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface HoverCardArrowProps extends PopperArrowProps {}\n\nconst HoverCardArrow = React.forwardRef<HoverCardArrowElement, HoverCardArrowProps>(\n  (props: ScopedProps<HoverCardArrowProps>, forwardedRef) => {\n    const { __scopeHoverCard, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeHoverCard);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nHoverCardArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction excludeTouch<E>(eventHandler: () => void) {\n  return (event: React.PointerEvent<E>) =>\n    event.pointerType === 'touch' ? undefined : eventHandler();\n}\n\n/**\n * Returns a list of nodes that can be in the tab sequence.\n * @see: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n */\nfunction getTabbableNodes(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  return nodes;\n}\n\nconst Root = HoverCard;\nconst Trigger = HoverCardTrigger;\nconst Content = HoverCardContent;\nconst Arrow = HoverCardArrow;\n\nexport {\n  createHoverCardScope,\n  //\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardContent,\n  HoverCardArrow,\n  //\n  Root,\n  Trigger,\n  Content,\n  Arrow,\n};\nexport type { HoverCardProps, HoverCardTriggerProps, HoverCardContentProps, HoverCardArrowProps };\n"],"names":["createHoverCardContext","createHoverCardScope","createContextScope","createPopperScope","usePopperScope","HoverCardProvider","useHoverCardContext","HoverCard","props","__scopeHoverCard","children","open","openProp","defaultOpen","onOpenChange","openDelay","closeDelay","popperScope","openTimerRef","React","useRef","closeTimerRef","setOpen","useControllableState","prop","defaultProp","onChange","handleOpen","useCallback","clearTimeout","current","window","setTimeout","handleClose","handleDismiss","useEffect","_react","createElement","$ddf490131a2c96ef2ad05ece6$var$HoverCardProvider","scope","onOpen","onClose","onDismiss","_radixUiReactPopper","Root","HoverCardTrigger","forwardRef","forwardedRef","triggerProps","context","Anchor","_babelRuntimeHelpersEsmExtends","asChild","Primitive","a","ref","onPointerEnter","composeEventHandlers","excludeTouch","onPointerLeave","onFocus","onBlur","onTouchStart","event","preventDefault","HoverCardContent","forceMount","contentProps","Presence","present","$ddf490131a2c96ef2ad05ece6$var$HoverCardContentImpl","HoverCardContentImpl","portalled","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","composedRefs","useComposedRefs","PortalWrapper","Portal","Fragment","container","nodes","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","node","tabIndex","FILTER_ACCEPT","FILTER_SKIP","nextNode","push","currentNode","getTabbableNodes","forEach","tabbable","setAttribute","DismissableLayer","disableOutsidePointerEvents","Content","style","HoverCardArrow","arrowProps","Arrow","eventHandler","pointerType","undefined","Trigger"],"version":3,"file":"index.module.js.map"}