{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/toolbar/src/Toolbar.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as SeparatorPrimitive from '@radix-ui/react-separator';\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group';\nimport { createToggleGroupScope } from '@radix-ui/react-toggle-group';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Toolbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOOLBAR_NAME = 'Toolbar';\n\ntype ScopedProps<P> = P & { __scopeToolbar?: Scope };\nconst [createToolbarContext, createToolbarScope] = createContextScope(TOOLBAR_NAME, [\n  createRovingFocusGroupScope,\n  createToggleGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useToggleGroupScope = createToggleGroupScope();\n\ntype RovingFocusGroupProps = Radix.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype ToolbarContextValue = { orientation: RovingFocusGroupProps['orientation'] };\nconst [ToolbarProvider, useToolbarContext] =\n  createToolbarContext<ToolbarContextValue>(TOOLBAR_NAME);\n\ntype ToolbarElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ToolbarProps extends PrimitiveDivProps {\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst Toolbar = React.forwardRef<ToolbarElement, ToolbarProps>(\n  (props: ScopedProps<ToolbarProps>, forwardedRef) => {\n    const {\n      __scopeToolbar,\n      orientation = 'horizontal',\n      dir = 'ltr',\n      loop = true,\n      ...toolbarProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n    return (\n      <ToolbarProvider scope={__scopeToolbar} orientation={orientation}>\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={dir}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"toolbar\"\n            aria-orientation={orientation}\n            dir={dir}\n            {...toolbarProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </ToolbarProvider>\n    );\n  }\n);\n\nToolbar.displayName = TOOLBAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'ToolbarSeparator';\n\ntype ToolbarSeparatorElement = React.ElementRef<typeof SeparatorPrimitive.Root>;\ntype SeparatorProps = Radix.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>;\ninterface ToolbarSeparatorProps extends SeparatorProps {}\n\nconst ToolbarSeparator = React.forwardRef<ToolbarSeparatorElement, ToolbarSeparatorProps>(\n  (props: ScopedProps<ToolbarSeparatorProps>, forwardedRef) => {\n    const { __scopeToolbar, ...separatorProps } = props;\n    const context = useToolbarContext(SEPARATOR_NAME, __scopeToolbar);\n    return (\n      <SeparatorPrimitive.Root\n        orientation={context.orientation === 'horizontal' ? 'vertical' : 'horizontal'}\n        {...separatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nToolbarSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst BUTTON_NAME = 'ToolbarButton';\n\ntype ToolbarButtonElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToolbarButtonProps extends PrimitiveButtonProps {}\n\nconst ToolbarButton = React.forwardRef<ToolbarButtonElement, ToolbarButtonProps>(\n  (props: ScopedProps<ToolbarButtonProps>, forwardedRef) => {\n    const { __scopeToolbar, ...buttonProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n    return (\n      <RovingFocusGroup.Item asChild {...rovingFocusGroupScope} focusable={!props.disabled}>\n        <Primitive.button type=\"button\" {...buttonProps} ref={forwardedRef} />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nToolbarButton.displayName = BUTTON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarLink\n * -----------------------------------------------------------------------------------------------*/\n\nconst LINK_NAME = 'ToolbarLink';\n\ntype ToolbarLinkElement = React.ElementRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = Radix.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface ToolbarLinkProps extends PrimitiveLinkProps {}\n\nconst ToolbarLink = React.forwardRef<ToolbarLinkElement, ToolbarLinkProps>(\n  (props: ScopedProps<ToolbarLinkProps>, forwardedRef) => {\n    const { __scopeToolbar, ...linkProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n    return (\n      <RovingFocusGroup.Item asChild {...rovingFocusGroupScope} focusable>\n        <Primitive.a\n          {...linkProps}\n          ref={forwardedRef}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if (event.key === ' ') event.currentTarget.click();\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nToolbarLink.displayName = LINK_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarToggleGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_GROUP_NAME = 'ToolbarToggleGroup';\n\ntype ToolbarToggleGroupElement = React.ElementRef<typeof ToggleGroupPrimitive.Root>;\ntype ToggleGroupProps = Radix.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root>;\ninterface ToolbarToggleGroupSingleProps extends Extract<ToggleGroupProps, { type: 'single' }> {}\ninterface ToolbarToggleGroupMultipleProps extends Extract<ToggleGroupProps, { type: 'multiple' }> {}\n\nconst ToolbarToggleGroup = React.forwardRef<\n  ToolbarToggleGroupElement,\n  ToolbarToggleGroupSingleProps | ToolbarToggleGroupMultipleProps\n>(\n  (\n    props: ScopedProps<ToolbarToggleGroupSingleProps | ToolbarToggleGroupMultipleProps>,\n    forwardedRef\n  ) => {\n    const { __scopeToolbar, ...toggleGroupProps } = props;\n    const context = useToolbarContext(TOGGLE_GROUP_NAME, __scopeToolbar);\n    const toggleGroupScope = useToggleGroupScope(__scopeToolbar);\n    return (\n      <ToggleGroupPrimitive.Root\n        data-orientation={context.orientation}\n        {...toggleGroupScope}\n        {...toggleGroupProps}\n        ref={forwardedRef}\n        rovingFocus={false}\n      />\n    );\n  }\n);\n\nToolbarToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarToggleItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_ITEM_NAME = 'ToolbarToggleItem';\n\ntype ToolbarToggleItemElement = React.ElementRef<typeof ToggleGroupPrimitive.Item>;\ntype ToggleGroupItemProps = Radix.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item>;\ninterface ToolbarToggleItemProps extends ToggleGroupItemProps {}\n\nconst ToolbarToggleItem = React.forwardRef<ToolbarToggleItemElement, ToolbarToggleItemProps>(\n  (props: ScopedProps<ToolbarToggleItemProps>, forwardedRef) => {\n    const { __scopeToolbar, ...toggleItemProps } = props;\n    const toggleGroupScope = useToggleGroupScope(__scopeToolbar);\n    return (\n      <ToolbarButton asChild {...props}>\n        <ToggleGroupPrimitive.Item {...toggleGroupScope} {...toggleItemProps} ref={forwardedRef} />\n      </ToolbarButton>\n    );\n  }\n);\n\nToolbarToggleItem.displayName = TOGGLE_ITEM_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toolbar;\nconst Separator = ToolbarSeparator;\nconst Button = ToolbarButton;\nconst Link = ToolbarLink;\nconst ToggleGroup = ToolbarToggleGroup;\nconst ToggleItem = ToolbarToggleItem;\n\nexport {\n  createToolbarScope,\n  //\n  Toolbar,\n  ToolbarSeparator,\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n  //\n  Root,\n  Separator,\n  Button,\n  Link,\n  ToggleGroup,\n  ToggleItem,\n};\nexport type {\n  ToolbarProps,\n  ToolbarSeparatorProps,\n  ToolbarButtonProps,\n  ToolbarLinkProps,\n  ToolbarToggleGroupSingleProps,\n  ToolbarToggleGroupMultipleProps,\n  ToolbarToggleItemProps,\n};\n"],"names":["a","__esModule","default","$parcel$exportWildcard","dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","createToolbarContext","createToolbarScope","createContextScope","createRovingFocusGroupScope","createToggleGroupScope","useRovingFocusGroupScope","useToggleGroupScope","ToolbarProvider","useToolbarContext","Toolbar","React","forwardRef","props","forwardedRef","__scopeToolbar","orientation","dir","loop","toolbarProps","rovingFocusGroupScope","_react","createElement","$ad2966449eadd63e15eb1cd256d5fc2$var$ToolbarProvider","scope","_radixUiReactRovingFocus","Root","_babelRuntimeHelpersExtends","asChild","Primitive","div","role","ref","ToolbarSeparator","separatorProps","context","_radixUiReactSeparator","ToolbarButton","buttonProps","Item","focusable","disabled","button","type","ToolbarLink","linkProps","onKeyDown","composeEventHandlers","event","currentTarget","click","ToolbarToggleGroup","toggleGroupProps","toggleGroupScope","_radixUiReactToggleGroup","rovingFocus","ToolbarToggleItem","toggleItemProps","Separator","Button","Link","ToggleGroup","ToggleItem"],"version":3,"file":"index.js.map"}